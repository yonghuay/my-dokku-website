"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scanDocuments = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const util_1 = tslib_1.__importDefault(require("util"));
const parse_1 = require("./parse");
const debug_1 = require("./debug");
const readFileAsync = util_1.default.promisify(fs_1.default.readFile);
let nextDocId = 0;
const getNextDocId = () => {
    return (nextDocId += 1);
};
function scanDocuments(DocInfoWithFilePathList, config) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const titleDocuments = [];
        const headingDocuments = [];
        const descriptionDocuments = [];
        const keywordsDocuments = [];
        const contentDocuments = [];
        const allDocuments = [
            titleDocuments,
            headingDocuments,
            descriptionDocuments,
            keywordsDocuments,
            contentDocuments,
        ];
        yield Promise.all(DocInfoWithFilePathList.map(({ filePath, url, type }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            (0, debug_1.debugVerbose)(`parsing %s file %o of %o`, type, path_1.default.relative(process.cwd(), filePath), url);
            const html = yield readFileAsync(filePath, { encoding: "utf8" });
            const parsed = (0, parse_1.parse)(html, type, url, config);
            if (!parsed) {
                // Unlisted content
                return;
            }
            const { pageTitle, description, keywords, sections, breadcrumb } = parsed;
            const titleId = getNextDocId();
            titleDocuments.push({
                i: titleId,
                t: pageTitle,
                u: url,
                b: breadcrumb,
            });
            if (description) {
                descriptionDocuments.push({
                    i: titleId,
                    t: description,
                    s: pageTitle,
                    u: url,
                    p: titleId,
                });
            }
            if (keywords) {
                keywordsDocuments.push({
                    i: titleId,
                    t: keywords,
                    s: pageTitle,
                    u: url,
                    p: titleId,
                });
            }
            for (const section of sections) {
                const trimmedHash = getTrimmedHash(section.hash, url);
                if (section.title !== pageTitle) {
                    if (trimmedHash === false) {
                        continue;
                    }
                    headingDocuments.push({
                        i: getNextDocId(),
                        t: section.title,
                        u: url,
                        h: trimmedHash,
                        p: titleId,
                    });
                }
                if (section.content) {
                    if (trimmedHash === false) {
                        continue;
                    }
                    contentDocuments.push({
                        i: getNextDocId(),
                        t: section.content,
                        s: section.title || pageTitle,
                        u: url,
                        h: trimmedHash,
                        p: titleId,
                    });
                }
            }
        })));
        return allDocuments;
    });
}
exports.scanDocuments = scanDocuments;
function getTrimmedHash(hash, url) {
    if (hash && !hash.startsWith("#") && hash.includes("#")) {
        // The hash link may contains URL path, we need to remove it.
        if (hash.startsWith(url) && hash[url.length] === "#") {
            return hash.slice(url.length);
        }
        // If the hash doesn't start with the URL, it's likely an external link.
        // Don't know this will happen or not, but just in case.
        return false;
    }
    return hash;
}
